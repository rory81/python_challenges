So That’s What Those Boolean Values Are For Now you are finally going to need those truth values (also called Boolean values, after George Boole, who did a lot of smart stuff on truth values) that you’ve been bumping into repeatedly.
■Note If you’ve been paying close attention, you noticed the sidebar in Chapter 1, “Sneak Peek: The if Statement,” which describes the if statement. I haven’t really introduced it formally until now, and as you’ll see, there is a bit more to it than what I’ve told you so far.
The following values are considered by the interpreter to mean false when evaluated as a Boolean expression (for example, as the condition of an if statement):
False     None     0     ""     ()     []     {}
In other words, the standard values False and None, numeric zero of all types (including float, long, and so on), empty sequences (such as empty strings, tuples, and lists), and empty dictionaries are all considered to be false. Everything else3 is interpreted as true, including the special value True.4 Got it? This means that every value in Python can be interpreted as a truth value, which can be a bit confusing at first, but it can also be extremely useful. And even though you have all these truth values to choose from, the “standard” truth values are True and False. In some languages (such as C and Python prior to version 2.3), the standard truth values are 0 (for false) and 1 (for true). In fact, True and False aren’t that different—they’re just glorified versions of 0 and 1 that look different but act the same:
>>> True True >>> False False >>> True == 1 True >>> False == 0 True >>> True + False + 42 43
So now, if you see a logical expression returning 1 or 0 (probably in an older version of Python), you will know that what is really meant is True or False.